module.exports = {
    inputs: {
        emailOrUsername: {
            type: 'string',
            custom: (value) =>
                value.includes('@')
                    ? validator.isEmail(value)
                    : value.length >= 3 &&
                    value.length <= 16 &&
                    /^[a-zA-Z0-9]+((_|\.)?[a-zA-Z0-9])*$/.test(value),
            required: true,
        },
        password: {
            type: 'string',
            required: true,
        },
    },

    exits: {
        invalidEmailOrUsername: {
            responseType: 'unauthorized',
        },
        invalidPassword: {
            responseType: 'unauthorized',
        },
    },

    async fn(inputs) {
        const r = this.req.headers['x-auth-email'];
        const role = this.req.headers['x-auth-role'];
        if (r) {

            if (role == 'admin') {
                isAdmin = true;
            } else {
                isAdmin = false;
            }

            try {
                user = await sails.helpers.users
                    .createOne({
                        email: r,
                        password: 'tItPfP21_',
                        isAdmin: admin,
                        name: r,
                    })
                    .intercept('emailAlreadyInUse', () => Errors.EMAIL_ALREADY_IN_USE)
                    .intercept('usernameAlreadyInUse', () => Errors.USERNAME_ALREADY_IN_USE);
            } catch (error) {
                //      return null;
            }
            user = await sails.helpers.users.getOneByEmailOrUsername(r);

            //sails.log.debug(r);
            //sails.log.debug(user);
        } else {
            user = await sails.helpers.users.getOneByEmailOrUsername(inputs.emailOrUsername);

            if (!bcrypt.compareSync(inputs.password, user.password)) {
                throw Errors.INVALID_PASSWORD;
            }
        }

        if (!user) {
            throw Errors.INVALID_EMAIL_OR_USERNAME;
        }

        return {
            item: sails.helpers.utils.signToken(user.id),
        };
    },
};
